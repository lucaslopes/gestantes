[
  {
    "objectID": "data_load.html",
    "href": "data_load.html",
    "title": "Coleta dos Dados",
    "section": "",
    "text": "import os\nimport sqlite3\nimport pandas as pd\nfrom tqdm import tqdm\nfrom pathlib import Path\nfrom zipfile import ZipFile\nfrom datatable import dt, f, by"
  },
  {
    "objectID": "data_load.html#sih",
    "href": "data_load.html#sih",
    "title": "Coleta dos Dados",
    "section": "SIH",
    "text": "SIH"
  },
  {
    "objectID": "data_load.html#sinasc",
    "href": "data_load.html#sinasc",
    "title": "Coleta dos Dados",
    "section": "SINASC",
    "text": "SINASC\n\nDescrição\nDados do Sistema de Informações sobre Nascidos Vivos (SINASC) reunidos pela Plataforma de Ciência de Dados aplicada à Saúde (PCDaS). Os dados foram obtidos junto ao DATASUS (Ministério da Saúde), tratados e enriquecidos seguindo uma metodologia própria de ETL da PCDaS, resultando em um dataset anual com todos os registros das declarações de nascidos vivos contidas no SINASC à partir de 1996. A atualização dos dados é realizada pelo DATASUS e a PCDaS extrai os registros anuais assim que disponibilizados. As colunas com nomes em MAIÚSCULO representam dados originais advindos do DATASUS e colunas com nomes iniciando em minúsculo representam dados resultantes de transformação ou enriquecimento.\n\n\nSelecionar\n\nColunas\n\ncols_sinasc = {\n  'ano_nasc': 'ano',\n  'CODESTAB': 'cnes',\n  'nasc_codigo_adotado': 'hosp_municipio',\n  'res_codigo_adotado': 'res_municipio',\n  'nasc_RSAUDCOD': 'hosp_regiao_saude',\n  'res_RSAUDCOD': 'res_regiao_saude',\n  'def_parto': 'tipo_parto',\n  'GRAVIDEZ': 'n_gestados',\n  'CONSULTAS': 'n_pre_natal',\n  'IDADEMAE': 'idade',\n  'ESCMAE': 'nivel_escolaridade',\n  'RACACORMAE': 'raca_cor',\n  'def_raca_cor': 'nasc_raca_cor',\n  'def_sexo': 'nasc_sexo',\n  'PESO': 'nasc_peso',\n  'APGAR1': 'nasc_apgar1',\n  'APGAR5': 'nasc_apgar5',\n  'LOCNASC': 'local_nasc',\n}\n\n\n\nLinhas\n\ndef filter_sinasc(df):\n  cols = list(cols_sinasc.values())[:-2]\n  cols = [c for c in cols if c in df.names]\n  if 'cnes' in df.names:\n    df_filtered = df[\n      (\n        (f['ano'] > 2009) & (f['ano'] < 2020)\n      ) & (\n        (f['idade'] > 9) & (f['idade'] < 50)\n      ) & (\n        (f['tipo_parto'] != 'Ignorado') # tipo parto\n      ) & (\n        (f['cnes'] != None)\n      ) & (\n        (f['local_nasc'] == 1) # Hospital\n      ) & (\n        (f['res_regiao_saude'] != 5301) # DF\n      ) & (\n        (f['res_regiao_saude'] != None)\n      ) & (\n        (f['hosp_regiao_saude'] != None)\n      ) & (\n        (f['res_municipio'] != None)\n      ) & (\n        (f['hosp_municipio'] != None)\n      ), cols]\n  else:\n    df_filtered = dt.Frame()\n  return df_filtered\n\n\n\n\nCarregar dados\n\npath_zip_sinasc = f'{Path.home()}/Databases/SINASC/SINASC.zip'\noutput_sinasc = path_zip_sinasc.replace('zip', 'csv.gzip')\n# df_sinasc = data_load(path_zip_sinasc, cols_sinasc, filter_sinasc)\n# df_sinasc.to_csv(output_sinasc)\ndf_sinasc = dt.fread(output_sinasc)\ndf_sinasc\n\n\n\n  \n  \n    anocneshosp_municipiores_municipiohosp_regiao_sauderes_regiao_saudetipo_parton_gestadosn_pre_natalidade…nasc_raca_cornasc_sexonasc_pesonasc_apgar1nasc_apgar5\n    ▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪\n  \n  \n    02010251559811000212004011041201Cesáreo1424…BrancaMasculino3400910\n    12010379259511001112004011011201Cesáreo1322…PardaMasculino395089\n    22010279848411003012004011031201Vaginal1420…BrancaMasculino355089\n    32010570192912000112000112011201Vaginal1321…PardaFeminino3000910\n    42010570192912000112000112011201Vaginal1331…PardaFeminino3000910\n    52010570192912000112000112011201Vaginal1423…PardaMasculino390079\n    62010570192912000112000112011201Vaginal1426…PardaFeminino3250710\n    72010570192912000112000112011201Vaginal1421…PardaMasculino3500810\n    82010570192912000112000112011201Vaginal1420…PardaFeminino290089\n    92010570192912000112000112011201Vaginal1431…PardaMasculino3400810\n    102010570192912000112000112011201Vaginal1428…PardaFeminino390089\n    112010570192912000112000112011201Vaginal1923…PardaFeminino320089\n    122010570192912000112000112011201Vaginal1230…PardaMasculino305089\n    132010570192912000112000112011201Vaginal1321…BrancaMasculino350089\n    142010570192912000112000112011201Vaginal1334…BrancaMasculino400010NA\n    ⋮⋮⋮⋮⋮⋮⋮⋮⋮⋮⋮⋱⋮⋮⋮⋮⋮\n    28,197,1592019342763352087017095052011707Cesáreo1429…PardaFeminino170078\n    28,197,16020191053753001017024053011709Cesáreo1336…IgnoradoIgnorado287089\n    28,197,1612019571751553001017061053011710Cesáreo1321…PardaMasculino255489\n    28,197,1622019571751553001017210053011705Vaginal1421…PardaFeminino261089\n    28,197,1632019301960853001017024053011709Vaginal1430…PardaMasculino2975910\n  \n  \n  \n    28,197,164 rows × 17 columns\n  \n\n\n\n100%|██████████| 675/675 [03:03<00:00, 3.69it/s]\n\n\nDescrição\nDados do Sistema de Informações Hospitalares do SUS (SIHSUS) reunidos pela Plataforma de Ciência de Dados aplicada à Saúde (PCDaS). Os dados foram obtidos junto ao DATASUS (Ministério da Saúde), tratados e enriquecidos seguindo uma metodologia própria de ETL (processo de extração, transformação e carga dos dados) da PCDaS, resultando em um dataset mensal com todos os registros de internações hospitalares contidos no SIHSUS à partir de janeiro de 2008.\nA atualização dos dados é realizada pelo DATASUS e a PCDaS extrai os registros mensais referentes aos arquivos RD_UF_ANO_MÊS.dbc (Reduzidos de AIH) assim que disponibilizados. As colunas com nomes em MAIÚSCULO representam dados originais advindos do DATASUS e colunas com nomes iniciando em minúsculo representam dados resultantes de transformação ou enriquecimento.\n\n\nSelecionar\n\nColunas\n\ncols_sih = {\n  'ano_internacao': 'ano',\n  'CNES': 'cnes',\n  'int_codigo_adotado': 'hosp_municipio',\n  'res_codigo_adotado': 'res_municipio',\n  'int_RSAUDCOD': 'hosp_regiao_saude',\n  'res_RSAUDCOD': 'res_regiao_saude',\n  'PROC_REA': 'tipo_parto',\n  'def_idade_anos': 'idade',\n}\n\n\n\nLinhas\n\ndef filter_sih(df):\n  cols = list(cols_sinasc.values())[:-1]\n  cols = [c for c in cols if c in df.names]\n  df_filtered = df[\n    (\n      (f['ano'] > 2009) & (f['ano'] < 2020)\n    ) & (\n      (f['idade'] > 9) & (f['idade'] < 50)\n    ) & (\n      (f['tipo_parto'] == 310010039) | (f['tipo_parto'] == 411010034)\n    ) & (\n      (f['cnes'] != None)\n    ) & (\n      (f['res_regiao_saude'] != 5301) # DF\n    ) & (\n      (f['res_regiao_saude'] != None)\n    ) & (\n      (f['hosp_regiao_saude'] != None)\n    ) & (\n      (f['res_municipio'] != None)\n    ), cols]\n  return df_filtered\n\n\n\n\nCarregar dados\n\npath_zip_sih = '/Volumes/SanDisk/SIHSUS.zip'\noutput_sih = f'{Path.home()}/Databases/SIHSUS/SIHSUS.csv.gzip'\n# df_sih = data_load(path_zip_sih, cols_sih, filter_sih)\n# df_sih.to_csv(output_sih)\ndf_sih = dt.fread(output_sih)\ndf_sih\n\n\n\n  \n  \n    anocneshosp_municipiores_municipiohosp_regiao_sauderes_regiao_saudetipo_partoidade\n    ▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪▪\n  \n  \n    0201020010201200051200051202120231001003923\n    1201020007331200401200401201120131001003928\n    2201020007331200401200401201120131001003938\n    3201020007331200401200401201120131001003916\n    4201020007331200401200401201120131001003926\n    5201020007331200401200401201120131001003926\n    6201020007331200401200401201120131001003927\n    7201020010201200051200051202120231001003931\n    8201020007331200401200401201120131001003930\n    9201020007331200401200401201120131001003918\n    10201020010201200051200051202120231001003928\n    11201020007331200401200381201120131001003932\n    12201020007331200401200401201120131001003930\n    13201020007331200401200011201120131001003926\n    14201020007331200401200401201120131001003926\n    ⋮⋮⋮⋮⋮⋮⋮⋮⋮\n    16,816,986201927656401709301718401704170441101003424\n    16,816,987201927656401709301716701704170441101003427\n    16,816,988201927656401709301716701704170441101003422\n    16,816,989201927656401709301709301704170441101003425\n    16,816,990201927551491716101712501708170841101003421\n  \n  \n  \n    16,816,991 rows × 8 columns\n  \n\n\n\n100%|██████████| 4400/4400 [24:46<00:00, 2.96it/s]"
  },
  {
    "objectID": "data_load.html#cnes",
    "href": "data_load.html#cnes",
    "title": "Coleta dos Dados",
    "section": "CNES",
    "text": "CNES"
  },
  {
    "objectID": "cnes.html",
    "href": "cnes.html",
    "title": "Inspeção CNES",
    "section": "",
    "text": "import os\nimport sqlite3\nimport pandas as pd\nfrom tqdm import tqdm\nfrom pathlib import Path\nfrom zipfile import ZipFile\nfrom datatable import dt, f, by\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn3\nfrom plotly import express as px, io as pio\n\npd.options.plotting.backend = 'plotly'\npio.renderers.default = 'plotly_mimetype+notebook_connected'"
  },
  {
    "objectID": "cnes.html#cnes",
    "href": "cnes.html#cnes",
    "title": "Inspeção CNES",
    "section": "CNES",
    "text": "CNES\n\npath_zip_cnes = f'{Path.home()}/Databases/CNES/CNES.csv.gzip'\noutput_cnes = path_zip_cnes.replace('CNES.', 'cnes_count.')\ndf_cnes = dt.fread(path_zip_cnes)\ndf_cnes = df_cnes[:, dt.count(), by('cnes')].sort(-f.count).to_pandas()\ndf_cnes.to_csv(output_cnes, index=False)\nn_cnes = df_cnes.shape[0]\ndf_cnes\n\n\n\n\n\n  \n    \n      \n      cnes\n      count\n    \n  \n  \n    \n      0\n      27863\n      10\n    \n    \n      1\n      2421534\n      10\n    \n    \n      2\n      2750643\n      9\n    \n    \n      3\n      19445\n      8\n    \n    \n      4\n      2025361\n      8\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      130269\n      9715541\n      1\n    \n    \n      130270\n      9715568\n      1\n    \n    \n      130271\n      9715576\n      1\n    \n    \n      130272\n      9715584\n      1\n    \n    \n      130273\n      9715606\n      1\n    \n  \n\n130274 rows × 2 columns"
  },
  {
    "objectID": "cnes.html#sinasc",
    "href": "cnes.html#sinasc",
    "title": "Inspeção CNES",
    "section": "SINASC",
    "text": "SINASC\n\npath_zip_sinasc = f'{Path.home()}/Databases/SINASC/SINASC.csv.gzip'\noutput_sinasc = path_zip_sinasc.replace('SINASC.', 'sinasc_count.')\ndf_cnes_sinasc = dt.fread(path_zip_sinasc)\ndf_cnes_sinasc = df_cnes_sinasc[:, dt.count(), by('cnes')].sort(-f.count).to_pandas()\ndf_cnes_sinasc.to_csv(output_sinasc, index=False)\nn_sinasc = df_cnes_sinasc.shape[0]\ndf_cnes_sinasc\n\n\n\n\n\n  \n    \n      \n      cnes\n      count\n    \n  \n  \n    \n      0\n      2079542\n      145885\n    \n    \n      1\n      3037274\n      115195\n    \n    \n      2\n      2232\n      104344\n    \n    \n      3\n      26794\n      103932\n    \n    \n      4\n      2323397\n      101349\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      8204\n      9491252\n      1\n    \n    \n      8205\n      9505253\n      1\n    \n    \n      8206\n      9569723\n      1\n    \n    \n      8207\n      9619488\n      1\n    \n    \n      8208\n      9728317\n      1\n    \n  \n\n8209 rows × 2 columns"
  },
  {
    "objectID": "cnes.html#sih",
    "href": "cnes.html#sih",
    "title": "Inspeção CNES",
    "section": "SIH",
    "text": "SIH\n\npath_zip_sinasc = f'{Path.home()}/Databases/SINASC/SINASC.csv.gzip'\noutput_sinasc = path_zip_sinasc.replace('SINASC.', 'sinasc_count.')\ndf_cnes_sinasc = dt.fread(path_zip_sinasc)\ndf_cnes_sinasc = df_cnes_sinasc[:, dt.count(), by('cnes')].sort(-f.count).to_pandas()\ndf_cnes_sinasc.to_csv(output_sinasc, index=False)\nn_sinasc = df_cnes_sinasc.shape[0]\ndf_cnes_sinasc\n\n\n\n\n\n  \n    \n      \n      cnes\n      count\n    \n  \n  \n    \n      0\n      2079542\n      145885\n    \n    \n      1\n      3037274\n      115195\n    \n    \n      2\n      2232\n      104344\n    \n    \n      3\n      26794\n      103932\n    \n    \n      4\n      2323397\n      101349\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      8204\n      9491252\n      1\n    \n    \n      8205\n      9505253\n      1\n    \n    \n      8206\n      9569723\n      1\n    \n    \n      8207\n      9619488\n      1\n    \n    \n      8208\n      9728317\n      1\n    \n  \n\n8209 rows × 2 columns\n\n\n\n\npath_zip_sih = f'{Path.home()}/Databases/SIHSUS/SIHSUS.csv.gzip'\noutput_sih = path_zip_sih.replace('SIHSUS.', 'sih_count.')\ndf_cnes_sih = dt.fread(path_zip_sih)\ndf_cnes_sih = df_cnes_sih[:, dt.count(), by('cnes')].sort(-f.count).to_pandas()\ndf_cnes_sinasc.to_csv(output_sih, index=False)\nn_sih = df_cnes_sih.shape[0]\ndf_cnes_sih\n\n\n\n\n\n  \n    \n      \n      cnes\n      count\n    \n  \n  \n    \n      0\n      2232\n      101955\n    \n    \n      1\n      3151794\n      75209\n    \n    \n      2\n      2323397\n      74712\n    \n    \n      3\n      2311682\n      64833\n    \n    \n      4\n      26794\n      63700\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      4144\n      7320175\n      1\n    \n    \n      4145\n      7603029\n      1\n    \n    \n      4146\n      7621442\n      1\n    \n    \n      4147\n      7704364\n      1\n    \n    \n      4148\n      7743068\n      1\n    \n  \n\n4149 rows × 2 columns"
  },
  {
    "objectID": "cnes.html#sinasc-sih",
    "href": "cnes.html#sinasc-sih",
    "title": "Inspeção CNES",
    "section": "SINASC & SIH",
    "text": "SINASC & SIH\n\nLista dos CNES\n\nsinasc_sih = df_cnes_sinasc.merge(df_cnes_sih, on='cnes', how='inner', suffixes=('_sinasc', '_sih'))\nn_sinasc_sih = sinasc_sih.shape[0]\nsinasc_sih\n\n\n\n\n\n  \n    \n      \n      cnes\n      count_sinasc\n      count_sih\n    \n  \n  \n    \n      0\n      2232\n      104344\n      101955\n    \n    \n      1\n      26794\n      103932\n      63700\n    \n    \n      2\n      2323397\n      101349\n      74712\n    \n    \n      3\n      2022621\n      99602\n      28260\n    \n    \n      4\n      2311682\n      87673\n      64833\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      4087\n      2796597\n      1\n      63\n    \n    \n      4088\n      5590663\n      1\n      13\n    \n    \n      4089\n      6452302\n      1\n      98\n    \n    \n      4090\n      6559379\n      1\n      2\n    \n    \n      4091\n      7006438\n      1\n      18\n    \n  \n\n4092 rows × 3 columns\n\n\n\n\n\nVenn\n\nc = venn2(\n  subsets = (\n    n_sinasc - n_sinasc_sih,\n    n_sih - n_sinasc_sih,\n    n_sinasc_sih,\n  ), set_labels = ('SINASC', 'SIH'),\n  set_colors=('blue', 'yellow'))\nc.get_patch_by_id('11').set_color('green')\nc.get_patch_by_id('11').set_edgecolor('none')\nc.get_patch_by_id('11').set_alpha(0.4)\nplt.show()"
  },
  {
    "objectID": "cnes.html#sinasc-cnes",
    "href": "cnes.html#sinasc-cnes",
    "title": "Inspeção CNES",
    "section": "SINASC & CNES",
    "text": "SINASC & CNES\n\nLista dos CNES\n\nsinasc_cnes = df_cnes_sinasc.merge(df_cnes, on='cnes', how='inner', suffixes=('_sinasc', '_cnes'))\nn_sinasc_cnes = sinasc_cnes.shape[0]\nsinasc_cnes\n\n\n\n\n\n  \n    \n      \n      cnes\n      count_sinasc\n      count_cnes\n    \n  \n  \n    \n      0\n      2232\n      104344\n      2\n    \n    \n      1\n      26794\n      103932\n      3\n    \n    \n      2\n      2323397\n      101349\n      2\n    \n    \n      3\n      2022621\n      99602\n      2\n    \n    \n      4\n      2311682\n      87673\n      4\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      7013\n      9208968\n      1\n      1\n    \n    \n      7014\n      9322825\n      1\n      1\n    \n    \n      7015\n      9491112\n      1\n      1\n    \n    \n      7016\n      9491252\n      1\n      1\n    \n    \n      7017\n      9619488\n      1\n      1\n    \n  \n\n7018 rows × 3 columns\n\n\n\n\nsinasc_cnes['count_sinasc'].sum()\n\n24494524\n\n\n\n\nVenn\n\nc = venn2(\n  subsets = (\n    n_sinasc - n_sinasc_cnes,\n    n_cnes - n_sinasc_cnes,\n    n_sinasc_cnes,\n  ), set_labels = ('SINASC', 'CNES'),\n  set_colors=('blue', 'yellow'))\nc.get_patch_by_id('11').set_color('green')\nc.get_patch_by_id('11').set_edgecolor('none')\nc.get_patch_by_id('11').set_alpha(0.4)\nplt.show()\n\n\n\n\n\n4117-1191\n\n2926\n\n\n\nsinasc_not_in_cnes_sus = df_cnes_sinasc[~df_cnes_sinasc['cnes'].isin(set(sinasc_cnes['cnes']))]\nsinasc_not_in_cnes_sus\n\n\n\n\n\n  \n    \n      \n      cnes\n      count\n    \n  \n  \n    \n      0\n      2079542\n      145885\n    \n    \n      1\n      3037274\n      115195\n    \n    \n      19\n      27871\n      62163\n    \n    \n      33\n      2688611\n      53114\n    \n    \n      37\n      3000907\n      51681\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      8201\n      9373314\n      1\n    \n    \n      8202\n      9465219\n      1\n    \n    \n      8205\n      9505253\n      1\n    \n    \n      8206\n      9569723\n      1\n    \n    \n      8208\n      9728317\n      1\n    \n  \n\n1191 rows × 2 columns\n\n\n\n\nsinasc_not_in_cnes_sus['count'].sum()\n\n3702640"
  },
  {
    "objectID": "cnes.html#sih-cnes",
    "href": "cnes.html#sih-cnes",
    "title": "Inspeção CNES",
    "section": "SIH & CNES",
    "text": "SIH & CNES\n\nLista dos CNES\n\nsih_cnes = df_cnes_sih.merge(df_cnes, on='cnes', how='inner', suffixes=('_sih', '_cnes'))\nn_sih_cnes = sih_cnes.shape[0]\nsih_cnes\n\n\n\n\n\n  \n    \n      \n      cnes\n      count_sih\n      count_cnes\n    \n  \n  \n    \n      0\n      2232\n      101955\n      2\n    \n    \n      1\n      3151794\n      75209\n      3\n    \n    \n      2\n      2323397\n      74712\n      2\n    \n    \n      3\n      2311682\n      64833\n      4\n    \n    \n      4\n      26794\n      63700\n      3\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      4141\n      7320175\n      1\n      3\n    \n    \n      4142\n      7603029\n      1\n      2\n    \n    \n      4143\n      7621442\n      1\n      2\n    \n    \n      4144\n      7704364\n      1\n      2\n    \n    \n      4145\n      7743068\n      1\n      2\n    \n  \n\n4146 rows × 3 columns\n\n\n\n\nsih_cnes['count_sih'].sum()\n\n16816117\n\n\n\n\nVenn\n\nc = venn2(\n  subsets = (\n    n_sih - n_sih_cnes,\n    n_cnes - n_sih_cnes,\n    n_sih_cnes,\n  ), set_labels = ('SIH', 'CNES'),\n  set_colors=('blue', 'yellow'))\nc.get_patch_by_id('11').set_color('green')\nc.get_patch_by_id('11').set_edgecolor('none')\nc.get_patch_by_id('11').set_alpha(0.4)\nplt.show()"
  },
  {
    "objectID": "cnes.html#sinasc-cnes-not-in-sih",
    "href": "cnes.html#sinasc-cnes-not-in-sih",
    "title": "Inspeção CNES",
    "section": "(SINASC & CNES) not in SIH",
    "text": "(SINASC & CNES) not in SIH\n\ndf_info_cnes = pd.read_csv(path_zip_cnes)\nsinasc_cnes_sih = sinasc_cnes.merge(df_cnes_sih, on='cnes', how='inner', suffixes=('_sinasc_cnes', '_sih'))\ns_cnes = set(sinasc_cnes_sih['cnes'])\ns_cnes = set(sinasc_cnes[~sinasc_cnes['cnes'].isin(s_cnes)]['cnes'])\nprint(len(s_cnes))\ninpect_cnes = df_info_cnes[df_info_cnes['cnes'].isin(s_cnes)]\ninpect_cnes = inpect_cnes.sort_values(by=['cnes'], ignore_index=True)\ninpect_cnes['cnes'] = inpect_cnes['cnes'].apply(lambda x: ('0' * 7 + str(x))[-7:])\ninpect_cnes\n\n2928\n\n\n\n\n\n\n  \n    \n      \n      cnes\n      uf\n      cod_mun\n      esfera_adm\n      retencao_tributos\n      tipo_retenção\n      natureza\n    \n  \n  \n    \n      0\n      0000035\n      PE\n      260290.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      0000035\n      PE\n      260290.0\n      MUNICIPAL\n      Estabelecimento PUBLICO\n      Estabelecimento PUBLICO\n      Administração Direta da Saúde (MS, SES, e SMS)\n    \n    \n      2\n      0000183\n      PE\n      260290.0\n      PRIVADA\n      Estabelecimento PRIVADO LUCRATIVA\n      NaN\n      Empresa Privada\n    \n    \n      3\n      0000221\n      PE\n      260290.0\n      PRIVADA\n      Estabelecimento PRIVADO LUCRATIVA\n      NaN\n      Empresa Privada\n    \n    \n      4\n      0000426\n      PE\n      261160.0\n      ESTADUAL\n      Estabelecimento PUBLICO\n      Estabelecimento PUBLICO\n      Administração Direta da Saúde (MS, SES, e SMS)\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      5728\n      9541004\n      GO\n      521020.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      5729\n      9546146\n      RJ\n      330630.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      5730\n      9548149\n      GO\n      520450.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      5731\n      9551476\n      PE\n      261060.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      5732\n      9619488\n      AP\n      160027.0\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n5733 rows × 7 columns\n\n\n\n\n# inpect_cnes.to_excel('inspect_cnes.xlsx')\n\n\nRepetidos\n\ninpect_cnes['cnes'].value_counts().hist()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introdução",
    "section": "",
    "text": "No Brasil, 98% dos partos ocorrem em ambiente hospitalar, e 77% no Sistema Único de Saúde (SUS). O acesso oportuno aos serviços obstétricos de internação para o parto é fundamental para garantir a segurança do cuidado materno e neonatal. Entretanto, há “vazios assistenciais” na oferta de serviços hospitalares pelo SUS que fazem com que grande parte das parturientes precise se deslocar de um município a outro para ser assistida.\nO retardo na atenção obstétrica no momento do parto está associado à desfechos maternos adversos, e o deslocamento de grandes distâncias tem sido associado a níveis elevados de mortalidade infantil e neonatal, além de maior risco de morbimortalidade materna. Assim, a análise da distância percorrida pelas parturientes de sua residência até o hospital é um indicador útil e sensível para avaliar a dificuldade em acessar cuidados maternos e neonatais no SUS.\nA análise da acessibilidade geográfica é um componente importante da avaliação de serviços de saúde e reflete aspectos da distribuição espacial da oferta de serviços que dificultam ou promovem sua utilização. A metodologia de análise de redes sociais (ARS) tem sido utilizada nesse contexto, incluindo a internação para o parto, e também como ferramenta para gestão em saúde.\nEste projeto tem o objetivo de analisar a acessibilidade geográfica ao parto hospitalar realizado no SUS nos últimos 10 anos, em todo Brasil, aplicando a ARS como uma nova ferramenta para a gestão de serviços de saúde. Serão utilizados dados do Departamento de Informática do SUS (DATASUS) para a construção das redes de deslocamento das gestantes em busca de internação para o parto, levando-se em conta as distâncias percorridas, mapeando fluxos preferenciais e identificando lacunas geográficas de atendimento e polos de atração de maior demanda, como medida de inequidade no acesso aos serviços. O projeto avança no processo de avaliação do sistema de saúde ao desenvolver novos indicadores de acesso à serviços obstétricos, baseados em uma metodologia inovadora, e com abrangência nacional e aplicabilidade a outras áreas de saúde pública.\nEspera-se, com este estudo, gerar evidências que permitam um melhor entendimento da organização e das fragilidades do SUS na assistência à saúde da mulher no ciclo gravídico-puerperal, contribuindo para o planejamento da atenção obstétrica e para o fortalecimento de políticas públicas voltadas para melhoria do acesso aos serviços de saúde."
  },
  {
    "objectID": "data_compare.html",
    "href": "data_compare.html",
    "title": "Comparação",
    "section": "",
    "text": "import os\nimport sqlite3\nimport pandas as pd\nfrom tqdm import tqdm\nfrom pathlib import Path\nfrom zipfile import ZipFile\nfrom datatable import dt, f, by\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn3\nfrom plotly import express as px, io as pio\n\npd.options.plotting.backend = 'plotly'\npio.renderers.default = 'plotly_mimetype+notebook_connected'"
  },
  {
    "objectID": "data_compare.html#contagem",
    "href": "data_compare.html#contagem",
    "title": "Comparação",
    "section": "Contagem",
    "text": "Contagem\n\nall_: Base original sem mudanças\nflt_: Base com filtros básicos\nsus_: Base filtrada e com CNES de VINC_SUS=1\n\n\nall_sih = 157033546\nall_sinasc = 74398079\nflt_sih = 16816991 # dt.fread(path_zip_sihsus).shape[0]\nflt_sinasc = 28197164 # dt.fread(path_zip_sinasc).shape[0]\nsus_sih = 16816117\nsih_sinasc = 24494524"
  },
  {
    "objectID": "data_compare.html#barplot",
    "href": "data_compare.html#barplot",
    "title": "Comparação",
    "section": "Barplot",
    "text": "Barplot\n\ndf_filter = pd.DataFrame([\n    ['SIH', 'all', all_sih],\n    ['SINASC', 'all', all_sinasc],\n    ['SIH', 'filter', flt_sih],\n    ['SINASC', 'filter', flt_sinasc],\n    ['SIH', 'sus', sus_sih],\n    ['SINASC', 'sus', sih_sinasc],\n], columns=['database', 'selection', 'records'])\nfig = px.bar(df_filter, x='database', y='records', color='selection', barmode='overlay')\nfig.show()\n\n\n                                                \n\n\n\nflt_sinasc - sih_sinasc == 3702640\n\nTrue\n\n\n\n3702640 / flt_sinasc * 100\n\n13.131249653333931"
  }
]